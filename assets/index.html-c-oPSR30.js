import{_ as p,r as o,o as i,c as l,b as s,d as n,e,a as t}from"./app-uKun91FB.js";const c={},r=s("h1",{id:"相关装饰器介绍",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#相关装饰器介绍","aria-hidden":"true"},"#"),n(" 相关装饰器介绍")],-1),u={href:"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841",target:"_blank",rel:"noopener noreferrer"},d=t(`<blockquote><p>ES2016 装饰器是一个表达式，它返回一个可以将目标、名称和属性描述符作为参数的函数。通过在装饰器前面添加一个 @ 字符并将其放置在你要装饰的内容的最顶部来应用它。可以为类、方法或属性定义装饰器。</p></blockquote><p>上述内容是 Nest 官网对装饰器的定义。简而言之，装饰器就是一个函数，它接受一个参数，然后返回一个函数，返回的函数可以被附加到类、方法或属性上。</p><h2 id="控制器装饰器" tabindex="-1"><a class="header-anchor" href="#控制器装饰器" aria-hidden="true">#</a> 控制器装饰器</h2><p>控制器装饰器是 Nest.js 中定义路由的主要方式。你可以使用@Controller 装饰器来创建控制器类，并使用@Get、@Post、@Put 等装饰器来定义路由处理程序方法。这使得路由的定义变得非常直观和易于维护。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">&quot;items&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ItemsController</span> <span class="token punctuation">{</span>
  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;This action returns all items&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参数装饰器" tabindex="-1"><a class="header-anchor" href="#参数装饰器" aria-hidden="true">#</a> 参数装饰器</h2><p>Nest 提供了一组有用的参数装饰器，可以将它们与 HTTP 路由处理程序一起使用。参数装饰器允许你在控制器方法中访问请求对象、响应对象和其他相关信息。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;:id&#39;</span><span class="token punctuation">)</span>
<span class="token function">findOne</span><span class="token punctuation">(</span>@<span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span> id<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">This action returns item </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),k={href:"https://docs.nestjs.com/custom-decorators",target:"_blank",rel:"noopener noreferrer"},v=t(`<ul><li><p>路由装饰器（Route decorators）：</p><ul><li><p>@Get()：定义处理 GET 请求的路由。</p></li><li><p>@Post()：定义处理 POST 请求的路由。</p></li><li><p>@Put()：定义处理 PUT 请求的路由。</p></li><li><p>@Delete()：定义处理 DELETE 请求的路由。</p></li><li><p>@Patch()：定义处理 PATCH 请求的路由。</p></li></ul></li><li><p>请求体装饰器（Request body decorators）：</p><ul><li><p>@Body()：从请求体中提取数据。</p></li><li><p>@Query()：从查询参数中提取数据。</p></li><li><p>@Param()：从路由参数中提取数据。</p></li><li><p>@Headers()：从请求头中提取数据。</p></li></ul></li><li><p>响应装饰器（Response decorators）：</p><ul><li><p>@Res()：注入原生 response 对象。</p></li><li><p>@Headers()：设置响应头。</p></li></ul></li><li><p>状态码装饰器（Status code decorators）：</p><ul><li>@HttpCode()：设置响应的状态码。</li></ul></li></ul><h2 id="自定义装饰器" tabindex="-1"><a class="header-anchor" href="#自定义装饰器" aria-hidden="true">#</a> 自定义装饰器</h2><p>有时，你可能需要创建自定义装饰器以满足特定的需求。你可以使用@Injectable()装饰器来创建可注入的服务，然后在需要的地方使用@Inject 装饰器来注入这些服务。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>
  <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;Hello from MyService!&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">&#39;items&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ItemsController</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">private</span> readonly myService<span class="token operator">:</span> MyService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myService<span class="token punctuation">.</span><span class="token function">getHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function m(b,h){const a=o("ExternalLinkIcon");return i(),l("div",null,[r,s("blockquote",null,[s("p",null,[n("Nest 是基于装饰器这种语言特性而创建的。在很多常见的编程语言中，装饰器是一个广为人知的概念，但在 JavaScript 世界中，这个概念仍然相对较新。所以为了更好地理解装饰器是如何工作的，建议看看这篇文章 "),s("a",u,[n("Exploring EcmaScript Decorators"),e(a)]),n("。下面给出一个简单的定义：")])]),d,s("p",null,[n("这里只介绍部分常用的装饰器，可以涵盖大部分业务场景，更多装饰器请参考"),s("a",k,[n("官方文档"),e(a)]),n("。")]),v])}const f=p(c,[["render",m],["__file","index.html.vue"]]);export{f as default};
