import{_ as n,o as s,c as a,a as t}from"./app-wAns2o05.js";const p="/hello-nest-doc/images/httpCode.png",e="/hello-nest-doc/images/res.png",o={},c=t(`<h1 id="设置状态码" tabindex="-1"><a class="header-anchor" href="#设置状态码" aria-hidden="true">#</a> 设置状态码</h1><p>在正常情况下，默认情况下，Nest.js 会自动设置响应的状态码为 200。如果没有显式地设置状态码，Nest.js 会将响应的状态码设置为 200，表示请求成功。当使用 class-validator 库的装饰器对 DTO 进行校验时，如果校验失败，Nest.js 会自动抛出一个 BadRequestException 异常，状态码为 400，包含有关校验错误的详细信息。</p><p>那如果我想手动设置状态码呢？</p><h2 id="通过-httpcode-装饰器设置" tabindex="-1"><a class="header-anchor" href="#通过-httpcode-装饰器设置" aria-hidden="true">#</a> 通过 @HttpCode() 装饰器设置</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/modules/user/user.controller.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> Param<span class="token punctuation">,</span> HttpCode<span class="token punctuation">,</span> HttpException<span class="token punctuation">,</span> HttpStatus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./user.service&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> GetUserDetailDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/getUserDetail.dto&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UserItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;src/core/types/user&#39;</span><span class="token punctuation">;</span>

@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">private</span> readonly userService<span class="token operator">:</span> UserService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;getUserDetail/:id&#39;</span><span class="token punctuation">)</span>
  @<span class="token function">HttpCode</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
  <span class="token function">getUserDetail</span><span class="token punctuation">(</span>
    @<span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> GetUserDetailDto<span class="token punctuation">)</span> id<span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> UserItem <span class="token operator">|</span> HttpException <span class="token punctuation">{</span>
    <span class="token keyword">const</span> targetUser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">getUserDetail</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> targetUser<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpException</span><span class="token punctuation">(</span><span class="token string">&#39;User was not found&#39;</span><span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span><span class="token constant">NOT_FOUND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+p+`" alt=""></p><h2 id="通过-res-参数装饰器设置" tabindex="-1"><a class="header-anchor" href="#通过-res-参数装饰器设置" aria-hidden="true">#</a> 通过 @Res() 参数装饰器设置</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/modules/user/user.controller.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> Param<span class="token punctuation">,</span> Res <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UserService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./user.service&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> GetUserDetailDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./dto/getUserDetail.dto&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Response <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;express&#39;</span><span class="token punctuation">;</span>

@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">private</span> readonly userService<span class="token operator">:</span> UserService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&#39;getUserDetail/:id&#39;</span><span class="token punctuation">)</span>
  <span class="token function">getUserDetail</span><span class="token punctuation">(</span>
    @<span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> GetUserDetailDto<span class="token punctuation">)</span> id<span class="token operator">:</span> string<span class="token punctuation">,</span>
    @<span class="token function">Res</span><span class="token punctuation">(</span><span class="token punctuation">)</span> res<span class="token operator">:</span> Response<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> targetUser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">getUserDetail</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>targetUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;User was not found&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+e+'" alt=""></p><h2 id="httpcode-vs-res" tabindex="-1"><a class="header-anchor" href="#httpcode-vs-res" aria-hidden="true">#</a> @HttpCode() vs. @Res()</h2><ul><li><p>@HttpCode() 装饰器用于设置控制器方法的返回状态码。它可以在控制器方法上直接使用，并指定所需的状态码。例如，@HttpCode(200) 将设置返回状态码为 200。这个装饰器只会影响返回的状态码，而不会对响应的内容进行其他处理。经常需要配合 HttpException 一起使用。</p></li><li><p>@Res() 参数装饰器用于将 Express 的 Response 对象注入到控制器方法中，以便你可以直接操作响应。通过 @Res()，你可以访问和修改响应的状态码、头部信息、发送响应等。这个装饰器提供了更灵活的方式来处理响应，并且你可以在控制器方法中进行更多的定制。</p></li></ul>',11),i=[c];function l(u,r){return s(),a("div",null,i)}const d=n(o,[["render",l],["__file","index.html.vue"]]);export{d as default};
