import{_ as o,r as n,o as a,c as l,b as t,d as e,e as r,a as c}from"./app-FNwbCENi.js";const i={},p=t("h1",{id:"nest-js-简介",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#nest-js-简介","aria-hidden":"true"},"#"),e(" Nest.js 简介")],-1),_={href:"https://nestjs.bootcss.com/",target:"_blank",rel:"noopener noreferrer"},h=t("u",null,"可扩展的",-1),d={href:"https://nodejs.org/en",target:"_blank",rel:"noopener noreferrer"},u=t("u",null,"渐进增强",-1),f={href:"https://www.typescriptlang.org/",target:"_blank",rel:"noopener noreferrer"},N=t("u",null,"HTTP 服务器框架上",-1),g={href:"https://expressjs.com/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/fastify/fastify",target:"_blank",rel:"noopener noreferrer"},k=c("<p>上述内容是 Nest.js 官网的介绍，简单来说，Nest.js 是一个基于 TypeScript 构建的 <strong>Node.js 服务端开发框架</strong>。它提供了很多开箱即用的功能，比如：依赖注入、拦截器、全局异常处理、管道、过滤器、模块化等等。</p><p>在我第一次看到上述介绍时，感觉还是比较抽象的，尤其有几个专有名词让我摸不着头脑，比如：</p><ul><li><p><u>可扩展的</u>：怎么扩展？类似于前端组件化？🤔️</p></li><li><p>JavaScript 的<u>渐进增强</u>的能力：JavaScript 还有这种能力？shift！我怎么不知道？🤨</p></li><li><p>Nest 构建在强大的 <u>HTTP 服务器框架上</u>：这又是什么，类似于组件封装吗？🧐</p></li></ul><p>磨刀不误砍柴工，接下来，我结合网上查到的解释和自己的理解，来对上述专有名词做一个简单的解释，知其然，知其所以然 👀， Let&#39;s go！</p>",4);function m(x,j){const s=n("ExternalLinkIcon");return a(),l("div",null,[p,t("blockquote",null,[t("p",null,[t("a",_,[e("Nest (NestJS)"),r(s)]),e(" 是一个用于构建高效、"),h,e(),t("a",d,[e("Node.js"),r(s)]),e(" 服务器端应用程序的开发框架。它利用 JavaScript 的"),u,e("的能力，使用并完全支持 "),t("a",f,[e("TypeScript"),r(s)]),e(" （仍然允许开发者使用纯 JavaScript 进行开发），并结合了 OOP（面向对象编程）、FP（函数式编程）和 FRP（函数响应式编程）。")])]),t("blockquote",null,[t("p",null,[e("在底层，Nest 构建在强大的 "),N,e("，例如 "),t("a",g,[e("Express"),r(s)]),e(" （默认），并且还可以通过配置从而使用 "),t("a",b,[e("Fastify"),r(s)]),e("！")])]),k])}const v=o(i,[["render",m],["__file","index.html.vue"]]);export{v as default};
