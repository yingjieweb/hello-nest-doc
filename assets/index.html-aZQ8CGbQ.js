import{_ as p,r as o,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-KOpu1c8Q.js";const i="/hello-nest-doc/images/middleware.png",u={},r=n("h1",{id:"nest-js-简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nest-js-简介","aria-hidden":"true"},"#"),s(" Nest.js 简介")],-1),d={href:"https://nestjs.bootcss.com/",target:"_blank",rel:"noopener noreferrer"},k=n("u",null,"可扩展的",-1),v={href:"https://nodejs.org/en",target:"_blank",rel:"noopener noreferrer"},m=n("u",null,"渐进增强",-1),b={href:"https://www.typescriptlang.org/",target:"_blank",rel:"noopener noreferrer"},h=n("u",null,"HTTP 服务器框架上",-1),_={href:"https://expressjs.com/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/fastify/fastify",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>上述内容是 Nest.js 官网的介绍，简单来说，Nest.js 是一个基于 TypeScript 构建的 <strong>Node.js 服务端开发框架</strong>。它提供了很多开箱即用的功能，比如：依赖注入、拦截器、全局异常处理、管道、过滤器、模块化等等。</p><p>在我第一次看到上述介绍时，感觉还是比较抽象的，尤其有几个专有名词让我摸不着头脑，比如：</p><ul><li><p><u>可扩展的</u>：怎么扩展？类似于前端组件化？🤔️</p></li><li><p>JavaScript 的<u>渐进增强</u>的能力：JavaScript 还有这种能力？shift！我怎么不知道？🤨</p></li><li><p>Nest 构建在强大的 <u>HTTP 服务器框架上</u>：这是怎么搞的，类似于组件封装吗？🧐</p></li></ul><p>磨刀不误砍柴工，接下来，我结合网上查到的解释和自己的理解，来对上述专有名词做一个简单的解释，知其然，知其所以然 👀， Let&#39;s go！</p><h2 id="可扩展表现" tabindex="-1"><a class="header-anchor" href="#可扩展表现" aria-hidden="true">#</a> 可扩展表现</h2><p>Nest.js 的可扩展性表现在多个方面，</p><ul><li>模块化架构：应用拆分成更小的模块，各部分可独立地进行扩展和修改，不会对整个系统造成大的影响</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 模块化架构 → 类比前端组件化、页面</span>

src
├── <span class="token operator">...</span>
├── app<span class="token punctuation">.</span>module<span class="token punctuation">.</span>ts
├── modules
├────── car<span class="token operator">/</span>
├────── engine<span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>依赖注入：内置依赖注入容器，用于管理组件之间的依赖关系，将组件的依赖关系解耦。依赖注入的核心概念是将组件的依赖项从组件内部获取，而不是在组件内部直接创建或实例化依赖项。通过这种方式，组件不需要关心依赖项的创建和生命周期管理，而是通过依赖注入容器（DI 容器）来自动解析和提供所需的依赖项。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">CarService</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token literal-property property">engine</span><span class="token operator">:</span> Engine<span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">engine</span><span class="token operator">:</span> Engine</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>engine <span class="token operator">=</span> engine<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 使用 this.engine 进行操作</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>中间件和拦截器：Nest.js 提供了中间件和拦截器的机制，使得在请求的处理过程中可以插入自定义的逻辑。中间件和拦截器可以用于实现诸如权限验证、日志记录、缓存等功能。通过这些机制，你可以在应用程序的不同层面上进行扩展，而不必改变核心的业务逻辑。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 可以在不同层面插入自定义逻辑 → 可以类比前端的路由守卫？</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable<span class="token punctuation">,</span> NestMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Request<span class="token punctuation">,</span> Response<span class="token punctuation">,</span> NextFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;express&#39;</span><span class="token punctuation">;</span>

@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthMiddleware</span> <span class="token keyword">implements</span> <span class="token class-name">NestMiddleware</span> <span class="token punctuation">{</span>
  <span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">req</span><span class="token operator">:</span> Request<span class="token punctuation">,</span> <span class="token literal-property property">res</span><span class="token operator">:</span> Response<span class="token punctuation">,</span> <span class="token literal-property property">next</span><span class="token operator">:</span> NextFunction</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在这里编写身份验证逻辑</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果请求头中没有授权信息，则返回未经授权的响应</span>
      res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Unauthorized&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 如果身份验证通过，则继续请求处理</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+i+'" alt=""></p><ul><li>数据库集成：Nest.js 与多种数据库集成框架（如TypeORM、Mongoose等）兼容，这使得在应用程序中使用数据库变得更加容易，并且可以方便地进行扩展和迁移。</li></ul><h2 id="基于-express" tabindex="-1"><a class="header-anchor" href="#基于-express" aria-hidden="true">#</a> 基于 Express</h2>',15),j={href:"https://expressjs.com/",target:"_blank",rel:"noopener noreferrer"},y=n("u",null,"简单和高效",-1),x=t(`<p>Node.js 本身提供了处理网络请求和构建 Web 服务器的能力，但它的 API 相对底层，需要开发者手动处理很多细节。<u>而 Express.js 通过封装 Node.js 的功能，提供了更高层次的抽象和开发工具，使得构建 Web 应用程序变得更加便捷</u>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> http <span class="token keyword">from</span> <span class="token string">&#39;http&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> method<span class="token punctuation">,</span> url <span class="token punctuation">}</span> <span class="token operator">=</span> request<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">&#39;GET&#39;</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">===</span> <span class="token string">&#39;/hello&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Express 实现上述功能</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/hello&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实严格来说 Express.js 并不是一个框架，它只是提供了基于中间件的请求响应处理流程。<u>Express.js 并没有规定代码应该怎么组织，怎么复用，怎么集成各种方案，所以代码能写成各种样子，对于大项目开发来说很难维护</u>。所以出现了更上层的 Node 框架，比如 Egg、Midway、Nest 这些，它们额外提供了架构能力，这类框架也叫企业级开发框架。</p><p>Nest.js 基于 Express.js 提供了更高层次的抽象和功能扩展。它引入了一些新的概念，<u>如模块、控制器和中间件</u>，以帮助开发者更好地组织和管理代码。Nest.js 还提供了一套强大的<u>依赖注入系统</u>，可以帮助解耦组件之间的依赖关系，并方便进行单元测试。</p><h2 id="nest-js-优势" tabindex="-1"><a class="header-anchor" href="#nest-js-优势" aria-hidden="true">#</a> Nest.js 优势？</h2>`,5),w={href:"https://juejin.cn/post/7218117377052377143",target:"_blank",rel:"noopener noreferrer"},N=n("li",null,[n("p",null,"无缝集成：直接使用 npm 安装常用的库")],-1),E=n("li",null,[n("p",null,"模块化架构")],-1),q=n("li",null,[n("p",null,"依赖注入")],-1),S=n("li",null,[n("p",null,"强大的路由系统")],-1),T=n("li",null,[n("p",null,"内置的中间件支持")],-1),I=n("li",null,[n("p",null,"生态系统和插件")],-1),P=n("p",null,"...",-1);function M(R,F){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,n("blockquote",null,[n("p",null,[n("a",d,[s("Nest (NestJS)"),e(a)]),s(" 是一个用于构建高效、"),k,s(),n("a",v,[s("Node.js"),e(a)]),s(" 服务器端应用程序的开发框架。它利用 JavaScript 的"),m,s("的能力，使用并完全支持 "),n("a",b,[s("TypeScript"),e(a)]),s(" （仍然允许开发者使用纯 JavaScript 进行开发），并结合了 OOP（面向对象编程）、FP（函数式编程）和 FRP（函数响应式编程）。")])]),n("blockquote",null,[n("p",null,[s("在底层，Nest 构建在强大的 "),h,s("，例如 "),n("a",_,[s("Express"),e(a)]),s(" （默认），并且还可以通过配置从而使用 "),n("a",g,[s("Fastify"),e(a)]),s("！")])]),f,n("p",null,[n("a",j,[s("Express.js"),e(a)]),s(" 是一个基于 Node.js 的 Web 应用程序框架，可以被视为对 Node.js 的封装。Express.js 提供了简化和抽象化的 API，使得在 Node.js 上构建 Web 应用程序变得更加"),y,s("。")]),x,n("ul",null,[n("li",null,[n("p",null,[s("TypeScript 支持 → "),n("a",w,[s("题外话：一定是优势吗？"),e(a)])])]),N,E,q,S,T,I]),P])}const V=p(u,[["render",M],["__file","index.html.vue"]]);export{V as default};
