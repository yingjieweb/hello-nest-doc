import{_ as t,r as e,o as p,c as o,a as s,b as n,d as c,e as l}from"./app-t9OmLDRP.js";const i={},u=s("h1",{id:"参数校验",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#参数校验","aria-hidden":"true"},"#"),n(" 参数校验")],-1),r={href:"https://github.com/typestack/class-validator",target:"_blank",rel:"noopener noreferrer"},d=l(`<p>🤔️ 思考一下：Nest.js 中的请求参数是如何进行校验的？Nest.js 明明是可以支持 TS 的，为什么还要使用第三方库来校验参数呢？</p><p>🎤 虽然 TypeScript 提供了静态类型检查，但类验证器可以为你的 DTO（Data Transfer Object）和实体类提供更强大的运行时校验。这意味着你可以在应用程序运行时捕获并处理不符合规范的数据，而不仅仅是在编译时发现问题。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$ npm install <span class="token keyword">class</span><span class="token operator">-</span>validator <span class="token keyword">class</span><span class="token operator">-</span>transformer

<span class="token comment">// class-validator 常用的装饰器:</span>
<span class="token comment">// @IsNumber()：验证值是否为数字类型</span>
<span class="token comment">// @IsString()：验证值是否为字符串类型</span>
<span class="token comment">// @IsBoolean()：验证值是否为布尔类型</span>
<span class="token comment">// @IsNotEmpty()：验证值是否非空</span>
<span class="token comment">// @IsOptional()：验证值是否可选</span>
<span class="token comment">// @IsEmail()：验证值是否为有效的电子邮件地址</span>
<span class="token comment">// @IsUrl()：验证值是否为有效的 URL 地址</span>
<span class="token comment">// @IsDate()：验证值是否为有效的日期</span>
<span class="token comment">// @Min()：验证值是否大于或等于指定的最小值</span>
<span class="token comment">// @Max()：验证值是否小于或等于指定的最大值</span>
<span class="token comment">// @Length()：验证字符串长度是否在指定的范围内</span>
<span class="token comment">// @Matches()：验证字符串是否匹配指定的正则表达式</span>
<span class="token comment">// @IsIn()：验证值是否属于指定的允许值列表</span>
<span class="token comment">// @IsNotEmptyObject()：验证对象是否为非空对象</span>

<span class="token comment">// 装饰器支持可选参数，例如：@IsNumber({message: &#39;id is not number!&#39;})</span>
<span class="token comment">// 具体参数说明：https://github.com/typestack/class-validator#readme</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="body-query-参数验证" tabindex="-1"><a class="header-anchor" href="#body-query-参数验证" aria-hidden="true">#</a> Body &amp; Query 参数验证</h2><ul><li>创建 DTO（数据传输对象）类，用于定义要验证的数据结构和规则。DTO 不是中间件或过滤器，而是一种设计模式，用于处理和验证输入数据。通过使用 DTO 进行参数验证，我们可以在控制器中对请求的数据进行验证，确保数据的完整性和有效性，从而减少错误和异常情况。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/modules/user/dto/addUser.dto.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IsNotEmpty<span class="token punctuation">,</span> IsString<span class="token punctuation">,</span> IsNumber<span class="token punctuation">,</span> IsIn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;class-validator&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AddUserDto</span> <span class="token punctuation">{</span>
  @<span class="token function">IsNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;id should not be empty&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  @<span class="token function">IsNumber</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">allowNaN</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;id must be a number&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> number<span class="token punctuation">;</span>

  @<span class="token function">IsNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  @<span class="token function">IsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>

  @<span class="token function">IsNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  @<span class="token function">IsNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> number<span class="token punctuation">;</span>

  @<span class="token function">IsNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  @<span class="token function">IsIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token literal-property property">gender</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在控制器中使用 DTO 类进行参数校验</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/modules/user/user.controller.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Post<span class="token punctuation">,</span> Body <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AddUserDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./dto/addUser.dto&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> DeleteUserDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./dto/deleteUser.dto&quot;</span><span class="token punctuation">;</span>

@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  @<span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">&quot;addUser&quot;</span><span class="token punctuation">)</span>
  <span class="token function">addUser</span><span class="token punctuation">(</span>@<span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> userData<span class="token operator">:</span> AddUserDto<span class="token punctuation">)</span><span class="token operator">:</span> UserItem<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  @<span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">&quot;deleteUser&quot;</span><span class="token punctuation">)</span>
  <span class="token function">deleteUser</span><span class="token punctuation">(</span>@<span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> query<span class="token operator">:</span> DeleteUserDto<span class="token punctuation">)</span><span class="token operator">:</span> UserItem<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在应用程序的主模块中启用参数校验：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> NestFactory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/core&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ValidationPipe <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AppModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./app.module&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>AppModule<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 全局使用管道，用于 Controller 层参数校验</span>
  app<span class="token punctuation">.</span><span class="token function">useGlobalPipes</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValidationPipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="params-参数验证" tabindex="-1"><a class="header-anchor" href="#params-参数验证" aria-hidden="true">#</a> Params 参数验证</h2><ul><li>自定义管道来验证 Params</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/modules/user/dto/getUserDetail.dto.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable<span class="token punctuation">,</span> PipeTransform<span class="token punctuation">,</span> BadRequestException <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>

@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">GetUserDetailDto</span> <span class="token keyword">implements</span> <span class="token class-name">PipeTransform</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> targetUserId <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetUserId <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">&quot;UsedId is positive number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> targetUserId<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在控制器中使用封装好的管道验证参数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Controller<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> Param <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@nestjs/common&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> GetUserDetailDto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./dto/getUserDetail.dto&quot;</span><span class="token punctuation">;</span>

@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;getUserDetail/:id&quot;</span><span class="token punctuation">)</span>
  <span class="token function">getUserDetail</span><span class="token punctuation">(</span>@<span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> GetUserDetailDto<span class="token punctuation">)</span> id<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> UserItem <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userService<span class="token punctuation">.</span><span class="token function">getUserDetail</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function k(m,v){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,s("p",null,[n("在 Nest.js 中，可以使用类验证器（"),s("a",r,[n("class-validator"),c(a)]),n("）库来进行参数校验。")]),d])}const y=t(i,[["render",k],["__file","index.html.vue"]]);export{y as default};
