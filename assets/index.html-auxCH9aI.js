import{_ as e,r as p,o,c,b as s,d as n,e as t,a as l}from"./app-uKun91FB.js";const u={},i=s("h1",{id:"基于-express",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#基于-express","aria-hidden":"true"},"#"),n(" 基于 Express")],-1),r=s("u",null,"HTTP 服务器框架上",-1),k={href:"https://expressjs.com/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/fastify/fastify",target:"_blank",rel:"noopener noreferrer"},v=s("p",null,"Nest.js 官网在介绍它的时候提到，其是构建在 Express 之上的，那我们不妨就先来聊一聊 Express 框架。",-1),m={href:"https://expressjs.com/",target:"_blank",rel:"noopener noreferrer"},b=s("u",null,"简单和高效",-1),h=l(`<p>Node.js 本身提供了处理网络请求和构建 Web 服务器的能力，但它的 API 相对底层，需要开发者手动处理很多细节。<u>而 Express.js 通过封装 Node.js 的功能，提供了更高层次的抽象和开发工具，使得构建 Web 应用程序变得更加便捷</u>。</p><p>我们通过一个接口实现来对比 Express 与 Node.js 的使用：</p><p><strong>通过 Node.js 实现</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> http <span class="token keyword">from</span> <span class="token string">&#39;http&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> method<span class="token punctuation">,</span> url <span class="token punctuation">}</span> <span class="token operator">=</span> request<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">&#39;GET&#39;</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">===</span> <span class="token string">&#39;/hello&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通过 Express 实现相同功能</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/hello&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实严格来说 Express.js 并不是一个框架，它只是提供了基于中间件的请求响应处理流程。<u>Express.js 并没有规定代码应该怎么组织，怎么复用，怎么集成各种方案，所以代码能写成各种样子，对于大项目开发来说很难维护</u>。所以出现了更上层的 Node 框架，比如 Egg、Midway、Nest 这些，它们额外提供了架构能力，这类框架也叫企业级开发框架。</p><p>Nest.js 基于 Express.js 提供了更高层次的抽象和功能扩展。它引入了一些新的概念，<u>如模块、控制器和中间件</u>，以帮助开发者更好地组织和管理代码。Nest.js 还提供了一套强大的<u>依赖注入系统</u>，可以帮助解耦组件之间的依赖关系，并方便进行单元测试。</p>`,8);function _(f,x){const a=p("ExternalLinkIcon");return o(),c("div",null,[i,s("blockquote",null,[s("p",null,[n("在底层，Nest 构建在强大的 "),r,n("，例如 "),s("a",k,[n("Express"),t(a)]),n(" （默认），并且还可以通过配置从而使用 "),s("a",d,[n("Fastify"),t(a)]),n("！")])]),v,s("p",null,[s("a",m,[n("Express.js"),t(a)]),n(" 是一个基于 Node.js 的 Web 应用程序框架，可以被视为对 Node.js 的封装。Express.js 提供了简化和抽象化的 API，使得在 Node.js 上构建 Web 应用程序变得更加"),b,n("。")]),h])}const j=e(u,[["render",_],["__file","index.html.vue"]]);export{j as default};
